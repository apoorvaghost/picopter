/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef webInterface_H
#define webInterface_H

#include <thrift/TDispatchProcessor.h>
#include "picopter_types.h"

namespace picopter {

class webInterfaceIf {
 public:
  virtual ~webInterfaceIf() {}
  virtual bool beginWaypointsThread() = 0;
  virtual bool beginLawnmowerThread() = 0;
  virtual bool allStop() = 0;
  virtual void requestStatus(std::string& _return) = 0;
  virtual void requestCoords(coordDeg& _return) = 0;
  virtual bool beginWaypointTraversal() = 0;
  virtual void requestNextWaypoint(coordDeg& _return) = 0;
  virtual bool addWaypoint(const coordDeg& wp) = 0;
  virtual bool updateWaypoint(const coordDeg& wp, const int32_t no) = 0;
  virtual bool removeWaypoints(const int32_t no) = 0;
  virtual bool resetWaypoints() = 0;
};

class webInterfaceIfFactory {
 public:
  typedef webInterfaceIf Handler;

  virtual ~webInterfaceIfFactory() {}

  virtual webInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(webInterfaceIf* /* handler */) = 0;
};

class webInterfaceIfSingletonFactory : virtual public webInterfaceIfFactory {
 public:
  webInterfaceIfSingletonFactory(const boost::shared_ptr<webInterfaceIf>& iface) : iface_(iface) {}
  virtual ~webInterfaceIfSingletonFactory() {}

  virtual webInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(webInterfaceIf* /* handler */) {}

 protected:
  boost::shared_ptr<webInterfaceIf> iface_;
};

class webInterfaceNull : virtual public webInterfaceIf {
 public:
  virtual ~webInterfaceNull() {}
  bool beginWaypointsThread() {
    bool _return = false;
    return _return;
  }
  bool beginLawnmowerThread() {
    bool _return = false;
    return _return;
  }
  bool allStop() {
    bool _return = false;
    return _return;
  }
  void requestStatus(std::string& /* _return */) {
    return;
  }
  void requestCoords(coordDeg& /* _return */) {
    return;
  }
  bool beginWaypointTraversal() {
    bool _return = false;
    return _return;
  }
  void requestNextWaypoint(coordDeg& /* _return */) {
    return;
  }
  bool addWaypoint(const coordDeg& /* wp */) {
    bool _return = false;
    return _return;
  }
  bool updateWaypoint(const coordDeg& /* wp */, const int32_t /* no */) {
    bool _return = false;
    return _return;
  }
  bool removeWaypoints(const int32_t /* no */) {
    bool _return = false;
    return _return;
  }
  bool resetWaypoints() {
    bool _return = false;
    return _return;
  }
};


class webInterface_beginWaypointsThread_args {
 public:

  webInterface_beginWaypointsThread_args() {
  }

  virtual ~webInterface_beginWaypointsThread_args() throw() {}


  bool operator == (const webInterface_beginWaypointsThread_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_beginWaypointsThread_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_beginWaypointsThread_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_beginWaypointsThread_pargs {
 public:


  virtual ~webInterface_beginWaypointsThread_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_beginWaypointsThread_result__isset {
  _webInterface_beginWaypointsThread_result__isset() : success(false) {}
  bool success;
} _webInterface_beginWaypointsThread_result__isset;

class webInterface_beginWaypointsThread_result {
 public:

  webInterface_beginWaypointsThread_result() : success(0) {
  }

  virtual ~webInterface_beginWaypointsThread_result() throw() {}

  bool success;

  _webInterface_beginWaypointsThread_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_beginWaypointsThread_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_beginWaypointsThread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_beginWaypointsThread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_beginWaypointsThread_presult__isset {
  _webInterface_beginWaypointsThread_presult__isset() : success(false) {}
  bool success;
} _webInterface_beginWaypointsThread_presult__isset;

class webInterface_beginWaypointsThread_presult {
 public:


  virtual ~webInterface_beginWaypointsThread_presult() throw() {}

  bool* success;

  _webInterface_beginWaypointsThread_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class webInterface_beginLawnmowerThread_args {
 public:

  webInterface_beginLawnmowerThread_args() {
  }

  virtual ~webInterface_beginLawnmowerThread_args() throw() {}


  bool operator == (const webInterface_beginLawnmowerThread_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_beginLawnmowerThread_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_beginLawnmowerThread_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_beginLawnmowerThread_pargs {
 public:


  virtual ~webInterface_beginLawnmowerThread_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_beginLawnmowerThread_result__isset {
  _webInterface_beginLawnmowerThread_result__isset() : success(false) {}
  bool success;
} _webInterface_beginLawnmowerThread_result__isset;

class webInterface_beginLawnmowerThread_result {
 public:

  webInterface_beginLawnmowerThread_result() : success(0) {
  }

  virtual ~webInterface_beginLawnmowerThread_result() throw() {}

  bool success;

  _webInterface_beginLawnmowerThread_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_beginLawnmowerThread_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_beginLawnmowerThread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_beginLawnmowerThread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_beginLawnmowerThread_presult__isset {
  _webInterface_beginLawnmowerThread_presult__isset() : success(false) {}
  bool success;
} _webInterface_beginLawnmowerThread_presult__isset;

class webInterface_beginLawnmowerThread_presult {
 public:


  virtual ~webInterface_beginLawnmowerThread_presult() throw() {}

  bool* success;

  _webInterface_beginLawnmowerThread_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class webInterface_allStop_args {
 public:

  webInterface_allStop_args() {
  }

  virtual ~webInterface_allStop_args() throw() {}


  bool operator == (const webInterface_allStop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_allStop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_allStop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_allStop_pargs {
 public:


  virtual ~webInterface_allStop_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_allStop_result__isset {
  _webInterface_allStop_result__isset() : success(false) {}
  bool success;
} _webInterface_allStop_result__isset;

class webInterface_allStop_result {
 public:

  webInterface_allStop_result() : success(0) {
  }

  virtual ~webInterface_allStop_result() throw() {}

  bool success;

  _webInterface_allStop_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_allStop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_allStop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_allStop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_allStop_presult__isset {
  _webInterface_allStop_presult__isset() : success(false) {}
  bool success;
} _webInterface_allStop_presult__isset;

class webInterface_allStop_presult {
 public:


  virtual ~webInterface_allStop_presult() throw() {}

  bool* success;

  _webInterface_allStop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class webInterface_requestStatus_args {
 public:

  webInterface_requestStatus_args() {
  }

  virtual ~webInterface_requestStatus_args() throw() {}


  bool operator == (const webInterface_requestStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_requestStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_requestStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_requestStatus_pargs {
 public:


  virtual ~webInterface_requestStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_requestStatus_result__isset {
  _webInterface_requestStatus_result__isset() : success(false) {}
  bool success;
} _webInterface_requestStatus_result__isset;

class webInterface_requestStatus_result {
 public:

  webInterface_requestStatus_result() : success() {
  }

  virtual ~webInterface_requestStatus_result() throw() {}

  std::string success;

  _webInterface_requestStatus_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const webInterface_requestStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_requestStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_requestStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_requestStatus_presult__isset {
  _webInterface_requestStatus_presult__isset() : success(false) {}
  bool success;
} _webInterface_requestStatus_presult__isset;

class webInterface_requestStatus_presult {
 public:


  virtual ~webInterface_requestStatus_presult() throw() {}

  std::string* success;

  _webInterface_requestStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class webInterface_requestCoords_args {
 public:

  webInterface_requestCoords_args() {
  }

  virtual ~webInterface_requestCoords_args() throw() {}


  bool operator == (const webInterface_requestCoords_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_requestCoords_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_requestCoords_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_requestCoords_pargs {
 public:


  virtual ~webInterface_requestCoords_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_requestCoords_result__isset {
  _webInterface_requestCoords_result__isset() : success(false) {}
  bool success;
} _webInterface_requestCoords_result__isset;

class webInterface_requestCoords_result {
 public:

  webInterface_requestCoords_result() {
  }

  virtual ~webInterface_requestCoords_result() throw() {}

  coordDeg success;

  _webInterface_requestCoords_result__isset __isset;

  void __set_success(const coordDeg& val) {
    success = val;
  }

  bool operator == (const webInterface_requestCoords_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_requestCoords_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_requestCoords_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_requestCoords_presult__isset {
  _webInterface_requestCoords_presult__isset() : success(false) {}
  bool success;
} _webInterface_requestCoords_presult__isset;

class webInterface_requestCoords_presult {
 public:


  virtual ~webInterface_requestCoords_presult() throw() {}

  coordDeg* success;

  _webInterface_requestCoords_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class webInterface_beginWaypointTraversal_args {
 public:

  webInterface_beginWaypointTraversal_args() {
  }

  virtual ~webInterface_beginWaypointTraversal_args() throw() {}


  bool operator == (const webInterface_beginWaypointTraversal_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_beginWaypointTraversal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_beginWaypointTraversal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_beginWaypointTraversal_pargs {
 public:


  virtual ~webInterface_beginWaypointTraversal_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_beginWaypointTraversal_result__isset {
  _webInterface_beginWaypointTraversal_result__isset() : success(false) {}
  bool success;
} _webInterface_beginWaypointTraversal_result__isset;

class webInterface_beginWaypointTraversal_result {
 public:

  webInterface_beginWaypointTraversal_result() : success(0) {
  }

  virtual ~webInterface_beginWaypointTraversal_result() throw() {}

  bool success;

  _webInterface_beginWaypointTraversal_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_beginWaypointTraversal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_beginWaypointTraversal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_beginWaypointTraversal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_beginWaypointTraversal_presult__isset {
  _webInterface_beginWaypointTraversal_presult__isset() : success(false) {}
  bool success;
} _webInterface_beginWaypointTraversal_presult__isset;

class webInterface_beginWaypointTraversal_presult {
 public:


  virtual ~webInterface_beginWaypointTraversal_presult() throw() {}

  bool* success;

  _webInterface_beginWaypointTraversal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class webInterface_requestNextWaypoint_args {
 public:

  webInterface_requestNextWaypoint_args() {
  }

  virtual ~webInterface_requestNextWaypoint_args() throw() {}


  bool operator == (const webInterface_requestNextWaypoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_requestNextWaypoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_requestNextWaypoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_requestNextWaypoint_pargs {
 public:


  virtual ~webInterface_requestNextWaypoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_requestNextWaypoint_result__isset {
  _webInterface_requestNextWaypoint_result__isset() : success(false) {}
  bool success;
} _webInterface_requestNextWaypoint_result__isset;

class webInterface_requestNextWaypoint_result {
 public:

  webInterface_requestNextWaypoint_result() {
  }

  virtual ~webInterface_requestNextWaypoint_result() throw() {}

  coordDeg success;

  _webInterface_requestNextWaypoint_result__isset __isset;

  void __set_success(const coordDeg& val) {
    success = val;
  }

  bool operator == (const webInterface_requestNextWaypoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_requestNextWaypoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_requestNextWaypoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_requestNextWaypoint_presult__isset {
  _webInterface_requestNextWaypoint_presult__isset() : success(false) {}
  bool success;
} _webInterface_requestNextWaypoint_presult__isset;

class webInterface_requestNextWaypoint_presult {
 public:


  virtual ~webInterface_requestNextWaypoint_presult() throw() {}

  coordDeg* success;

  _webInterface_requestNextWaypoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _webInterface_addWaypoint_args__isset {
  _webInterface_addWaypoint_args__isset() : wp(false) {}
  bool wp;
} _webInterface_addWaypoint_args__isset;

class webInterface_addWaypoint_args {
 public:

  webInterface_addWaypoint_args() {
  }

  virtual ~webInterface_addWaypoint_args() throw() {}

  coordDeg wp;

  _webInterface_addWaypoint_args__isset __isset;

  void __set_wp(const coordDeg& val) {
    wp = val;
  }

  bool operator == (const webInterface_addWaypoint_args & rhs) const
  {
    if (!(wp == rhs.wp))
      return false;
    return true;
  }
  bool operator != (const webInterface_addWaypoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_addWaypoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_addWaypoint_pargs {
 public:


  virtual ~webInterface_addWaypoint_pargs() throw() {}

  const coordDeg* wp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_addWaypoint_result__isset {
  _webInterface_addWaypoint_result__isset() : success(false) {}
  bool success;
} _webInterface_addWaypoint_result__isset;

class webInterface_addWaypoint_result {
 public:

  webInterface_addWaypoint_result() : success(0) {
  }

  virtual ~webInterface_addWaypoint_result() throw() {}

  bool success;

  _webInterface_addWaypoint_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_addWaypoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_addWaypoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_addWaypoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_addWaypoint_presult__isset {
  _webInterface_addWaypoint_presult__isset() : success(false) {}
  bool success;
} _webInterface_addWaypoint_presult__isset;

class webInterface_addWaypoint_presult {
 public:


  virtual ~webInterface_addWaypoint_presult() throw() {}

  bool* success;

  _webInterface_addWaypoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _webInterface_updateWaypoint_args__isset {
  _webInterface_updateWaypoint_args__isset() : wp(false), no(false) {}
  bool wp;
  bool no;
} _webInterface_updateWaypoint_args__isset;

class webInterface_updateWaypoint_args {
 public:

  webInterface_updateWaypoint_args() : no(0) {
  }

  virtual ~webInterface_updateWaypoint_args() throw() {}

  coordDeg wp;
  int32_t no;

  _webInterface_updateWaypoint_args__isset __isset;

  void __set_wp(const coordDeg& val) {
    wp = val;
  }

  void __set_no(const int32_t val) {
    no = val;
  }

  bool operator == (const webInterface_updateWaypoint_args & rhs) const
  {
    if (!(wp == rhs.wp))
      return false;
    if (!(no == rhs.no))
      return false;
    return true;
  }
  bool operator != (const webInterface_updateWaypoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_updateWaypoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_updateWaypoint_pargs {
 public:


  virtual ~webInterface_updateWaypoint_pargs() throw() {}

  const coordDeg* wp;
  const int32_t* no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_updateWaypoint_result__isset {
  _webInterface_updateWaypoint_result__isset() : success(false) {}
  bool success;
} _webInterface_updateWaypoint_result__isset;

class webInterface_updateWaypoint_result {
 public:

  webInterface_updateWaypoint_result() : success(0) {
  }

  virtual ~webInterface_updateWaypoint_result() throw() {}

  bool success;

  _webInterface_updateWaypoint_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_updateWaypoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_updateWaypoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_updateWaypoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_updateWaypoint_presult__isset {
  _webInterface_updateWaypoint_presult__isset() : success(false) {}
  bool success;
} _webInterface_updateWaypoint_presult__isset;

class webInterface_updateWaypoint_presult {
 public:


  virtual ~webInterface_updateWaypoint_presult() throw() {}

  bool* success;

  _webInterface_updateWaypoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _webInterface_removeWaypoints_args__isset {
  _webInterface_removeWaypoints_args__isset() : no(false) {}
  bool no;
} _webInterface_removeWaypoints_args__isset;

class webInterface_removeWaypoints_args {
 public:

  webInterface_removeWaypoints_args() : no(0) {
  }

  virtual ~webInterface_removeWaypoints_args() throw() {}

  int32_t no;

  _webInterface_removeWaypoints_args__isset __isset;

  void __set_no(const int32_t val) {
    no = val;
  }

  bool operator == (const webInterface_removeWaypoints_args & rhs) const
  {
    if (!(no == rhs.no))
      return false;
    return true;
  }
  bool operator != (const webInterface_removeWaypoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_removeWaypoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_removeWaypoints_pargs {
 public:


  virtual ~webInterface_removeWaypoints_pargs() throw() {}

  const int32_t* no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_removeWaypoints_result__isset {
  _webInterface_removeWaypoints_result__isset() : success(false) {}
  bool success;
} _webInterface_removeWaypoints_result__isset;

class webInterface_removeWaypoints_result {
 public:

  webInterface_removeWaypoints_result() : success(0) {
  }

  virtual ~webInterface_removeWaypoints_result() throw() {}

  bool success;

  _webInterface_removeWaypoints_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_removeWaypoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_removeWaypoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_removeWaypoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_removeWaypoints_presult__isset {
  _webInterface_removeWaypoints_presult__isset() : success(false) {}
  bool success;
} _webInterface_removeWaypoints_presult__isset;

class webInterface_removeWaypoints_presult {
 public:


  virtual ~webInterface_removeWaypoints_presult() throw() {}

  bool* success;

  _webInterface_removeWaypoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class webInterface_resetWaypoints_args {
 public:

  webInterface_resetWaypoints_args() {
  }

  virtual ~webInterface_resetWaypoints_args() throw() {}


  bool operator == (const webInterface_resetWaypoints_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const webInterface_resetWaypoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_resetWaypoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class webInterface_resetWaypoints_pargs {
 public:


  virtual ~webInterface_resetWaypoints_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_resetWaypoints_result__isset {
  _webInterface_resetWaypoints_result__isset() : success(false) {}
  bool success;
} _webInterface_resetWaypoints_result__isset;

class webInterface_resetWaypoints_result {
 public:

  webInterface_resetWaypoints_result() : success(0) {
  }

  virtual ~webInterface_resetWaypoints_result() throw() {}

  bool success;

  _webInterface_resetWaypoints_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const webInterface_resetWaypoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const webInterface_resetWaypoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webInterface_resetWaypoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _webInterface_resetWaypoints_presult__isset {
  _webInterface_resetWaypoints_presult__isset() : success(false) {}
  bool success;
} _webInterface_resetWaypoints_presult__isset;

class webInterface_resetWaypoints_presult {
 public:


  virtual ~webInterface_resetWaypoints_presult() throw() {}

  bool* success;

  _webInterface_resetWaypoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class webInterfaceClient : virtual public webInterfaceIf {
 public:
  webInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  webInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool beginWaypointsThread();
  void send_beginWaypointsThread();
  bool recv_beginWaypointsThread();
  bool beginLawnmowerThread();
  void send_beginLawnmowerThread();
  bool recv_beginLawnmowerThread();
  bool allStop();
  void send_allStop();
  bool recv_allStop();
  void requestStatus(std::string& _return);
  void send_requestStatus();
  void recv_requestStatus(std::string& _return);
  void requestCoords(coordDeg& _return);
  void send_requestCoords();
  void recv_requestCoords(coordDeg& _return);
  bool beginWaypointTraversal();
  void send_beginWaypointTraversal();
  bool recv_beginWaypointTraversal();
  void requestNextWaypoint(coordDeg& _return);
  void send_requestNextWaypoint();
  void recv_requestNextWaypoint(coordDeg& _return);
  bool addWaypoint(const coordDeg& wp);
  void send_addWaypoint(const coordDeg& wp);
  bool recv_addWaypoint();
  bool updateWaypoint(const coordDeg& wp, const int32_t no);
  void send_updateWaypoint(const coordDeg& wp, const int32_t no);
  bool recv_updateWaypoint();
  bool removeWaypoints(const int32_t no);
  void send_removeWaypoints(const int32_t no);
  bool recv_removeWaypoints();
  bool resetWaypoints();
  void send_resetWaypoints();
  bool recv_resetWaypoints();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class webInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<webInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (webInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_beginWaypointsThread(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_beginLawnmowerThread(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_allStop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestCoords(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_beginWaypointTraversal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestNextWaypoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addWaypoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateWaypoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeWaypoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resetWaypoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  webInterfaceProcessor(boost::shared_ptr<webInterfaceIf> iface) :
    iface_(iface) {
    processMap_["beginWaypointsThread"] = &webInterfaceProcessor::process_beginWaypointsThread;
    processMap_["beginLawnmowerThread"] = &webInterfaceProcessor::process_beginLawnmowerThread;
    processMap_["allStop"] = &webInterfaceProcessor::process_allStop;
    processMap_["requestStatus"] = &webInterfaceProcessor::process_requestStatus;
    processMap_["requestCoords"] = &webInterfaceProcessor::process_requestCoords;
    processMap_["beginWaypointTraversal"] = &webInterfaceProcessor::process_beginWaypointTraversal;
    processMap_["requestNextWaypoint"] = &webInterfaceProcessor::process_requestNextWaypoint;
    processMap_["addWaypoint"] = &webInterfaceProcessor::process_addWaypoint;
    processMap_["updateWaypoint"] = &webInterfaceProcessor::process_updateWaypoint;
    processMap_["removeWaypoints"] = &webInterfaceProcessor::process_removeWaypoints;
    processMap_["resetWaypoints"] = &webInterfaceProcessor::process_resetWaypoints;
  }

  virtual ~webInterfaceProcessor() {}
};

class webInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  webInterfaceProcessorFactory(const ::boost::shared_ptr< webInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< webInterfaceIfFactory > handlerFactory_;
};

class webInterfaceMultiface : virtual public webInterfaceIf {
 public:
  webInterfaceMultiface(std::vector<boost::shared_ptr<webInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~webInterfaceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<webInterfaceIf> > ifaces_;
  webInterfaceMultiface() {}
  void add(boost::shared_ptr<webInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool beginWaypointsThread() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->beginWaypointsThread();
    }
    return ifaces_[i]->beginWaypointsThread();
  }

  bool beginLawnmowerThread() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->beginLawnmowerThread();
    }
    return ifaces_[i]->beginLawnmowerThread();
  }

  bool allStop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->allStop();
    }
    return ifaces_[i]->allStop();
  }

  void requestStatus(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestStatus(_return);
    }
    ifaces_[i]->requestStatus(_return);
    return;
  }

  void requestCoords(coordDeg& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestCoords(_return);
    }
    ifaces_[i]->requestCoords(_return);
    return;
  }

  bool beginWaypointTraversal() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->beginWaypointTraversal();
    }
    return ifaces_[i]->beginWaypointTraversal();
  }

  void requestNextWaypoint(coordDeg& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestNextWaypoint(_return);
    }
    ifaces_[i]->requestNextWaypoint(_return);
    return;
  }

  bool addWaypoint(const coordDeg& wp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addWaypoint(wp);
    }
    return ifaces_[i]->addWaypoint(wp);
  }

  bool updateWaypoint(const coordDeg& wp, const int32_t no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateWaypoint(wp, no);
    }
    return ifaces_[i]->updateWaypoint(wp, no);
  }

  bool removeWaypoints(const int32_t no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeWaypoints(no);
    }
    return ifaces_[i]->removeWaypoints(no);
  }

  bool resetWaypoints() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resetWaypoints();
    }
    return ifaces_[i]->resetWaypoints();
  }

};

} // namespace

#endif
