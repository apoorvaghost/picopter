/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef picopter_TYPES_H
#define picopter_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace picopter {

typedef struct _coordDeg__isset {
  _coordDeg__isset() : lat(false), lon(false) {}
  bool lat;
  bool lon;
} _coordDeg__isset;

class coordDeg {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  coordDeg() : lat(0), lon(0) {
  }

  virtual ~coordDeg() throw() {}

  double lat;
  double lon;

  _coordDeg__isset __isset;

  void __set_lat(const double val) {
    lat = val;
  }

  void __set_lon(const double val) {
    lon = val;
  }

  bool operator == (const coordDeg & rhs) const
  {
    if (!(lat == rhs.lat))
      return false;
    if (!(lon == rhs.lon))
      return false;
    return true;
  }
  bool operator != (const coordDeg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const coordDeg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(coordDeg &a, coordDeg &b);

} // namespace

#endif
